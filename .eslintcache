[{"C:\\Users\\shlomo\\Desktop\\majordomo\\src\\index.js":"1","C:\\Users\\shlomo\\Desktop\\majordomo\\src\\pages\\login page\\LoginPage.js":"2","C:\\Users\\shlomo\\Desktop\\majordomo\\src\\Dictionary.js":"3","C:\\Users\\shlomo\\Desktop\\majordomo\\src\\pages\\Main user page\\MainUserPage.js":"4","C:\\Users\\shlomo\\Desktop\\majordomo\\src\\config\\firebaseConfig.js":"5","C:\\Users\\shlomo\\Desktop\\majordomo\\src\\components\\containers.jsx":"6","C:\\Users\\shlomo\\Desktop\\majordomo\\src\\components\\notifications.jsx":"7","C:\\Users\\shlomo\\Desktop\\majordomo\\src\\components\\bars.jsx":"8"},{"size":276,"mtime":1610930196686,"results":"9","hashOfConfig":"10"},{"size":6164,"mtime":1610628469884,"results":"11","hashOfConfig":"10"},{"size":3622,"mtime":1611141117711,"results":"12","hashOfConfig":"10"},{"size":2738,"mtime":1611141117728,"results":"13","hashOfConfig":"10"},{"size":661,"mtime":1610459349628,"results":"14","hashOfConfig":"10"},{"size":2938,"mtime":1611141117714,"results":"15","hashOfConfig":"10"},{"size":5652,"mtime":1611141117719,"results":"16","hashOfConfig":"10"},{"size":1520,"mtime":1610964735074,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17ximuj",{"filePath":"20","messages":"21","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"25"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\shlomo\\Desktop\\majordomo\\src\\index.js",[],"C:\\Users\\shlomo\\Desktop\\majordomo\\src\\pages\\login page\\LoginPage.js",["38","39","40","41","42","43"],"C:\\Users\\shlomo\\Desktop\\majordomo\\src\\Dictionary.js",["44","45","46","47"],"import React from 'react';\r\nimport LocalizedStrings from 'react-localization';\r\nimport Dropdown, { DropdownContent, DropdownTrigger } from 'react-simple-dropdown';\r\nimport './Dictionary.css';\r\nimport globe from './images/globe.png';\r\nimport israelFlag from './images/icons/israel.svg';\r\nimport usaFlag from './images/icons/USA.svg';\r\nimport {base_url} from './index'\r\n\r\n\r\n/* LocalizedStrings is holding our Dictionary so that all of the pages wiil be able to be translated.\r\nto set a language you can call 'Dictionart.setLanguage([the language])'\r\nall pages can reference the text with 'Dictionery.[reference]\r\nthe references were devided to the main pages that is using them*/\r\nexport const Dictionary = new LocalizedStrings({\r\n  EN: {\r\n    //login page\r\n    enterMail: `Please enter email`,\r\n    enterPass: `Password`,\r\n    login: `Log in`, \r\n    signOut: `Sign out`,\r\n    inventory : \"show inventory\",\r\n\r\n    \r\n    \r\n    //containers\r\n    unknown_date : \"unknown date\",\r\n\r\n    //notifications\r\n    just_few:\"Just a few left\",\r\n    running_low:\"Running low\",\r\n    must_use:\"Must use ASAP\",\r\n    add_to_order :\"Add to order\",\r\n    suggest_dish :\"Suggest Dish\",\r\n    \r\n\r\n\r\n    \r\n    \r\n  },\r\n  HE: {\r\n    //login page\r\n    enterMail: `אנא הכניס דוא''ל`,\r\n    enterPass: `אנא הכנס סיסמא`,\r\n    login: `התחבר`,\r\n    signOut: `התנתק`,\r\n    inventory : \"הצגת מלאי\",\r\n\r\n\r\n    //containers\r\n    add_to_order :\"הוסף להזמנה\",\r\n    unknown_date : \"תאריך לא ידוע\",\r\n    \r\n     //notifications\r\n     just_few:\"נותרו רק כמה\",\r\n     running_low:\"אוזל\",\r\n     must_use:\"צריך להשתמש בדחיפות\",\r\n    \r\n  }});\r\n\r\n  \r\n//language array\r\nexport const langs = [\"HE\", \"EN\"];\r\n\r\n//set language that is in the session Storage\r\nvar language = sessionStorage.getItem(\"current_language\");\r\nif (language === null) {\r\n  language = langs[0];\r\n}\r\nDictionary.setLanguage(language);\r\n\r\n//save new language in session storage and reload page\r\nfunction changeLanguage(lang) {\r\n  return function () {\r\n    sessionStorage.setItem(\"current_language\", lang);\r\n    window.location.reload();\r\n  }\r\n}\r\n//get the current page direction needed\r\nexport function getRTL(lang) {\r\n  let targetLang = lang ? lang : Dictionary.getLanguage();\r\n\r\n  switch (targetLang) {\r\n    case \"EN\":\r\n      return \"ltr\";\r\n    case \"HE\":\r\n    default:\r\n      return \"rtl\";\r\n  }\r\n\r\n\r\n}\r\n//sets a globe image with three language buttons \r\nexport const LangBtn = () => {\r\n  var currentLng = Dictionary.getLanguage();\r\n  var HEId = \"\",\r\n    ENId = \"\";\r\n\r\n  if (currentLng === \"EN\") ENId = \"chosen\";\r\n  else HEId = \"chosen\";\r\n\r\nvar lang_arr = {\"EN\":usaFlag,\"HE\":israelFlag} \r\n\r\n  return (\r\n    <div id=\"languages\">\r\n      <Dropdown >\r\n\r\n        <DropdownTrigger>\r\n          <div id=\"displayAndGlobe\">\r\n            <div>\r\n              <img src={lang_arr[Dictionary.getLanguage()]} id=\"globus\" alt=\"lang\" />\r\n            </div>\r\n          </div>\r\n        </DropdownTrigger>\r\n\r\n        <DropdownContent>\r\n\r\n          <ul id=\"langlist\">\r\n            <li>\r\n              <div className=\"flags\">\r\n              <img src={israelFlag} id={HEId} className=\"langButtons\" onClick={changeLanguage(\"HE\")}></img>\r\n              <div>עברית</div>\r\n              </div>\r\n            </li>\r\n            <li>\r\n            <div className=\"flags\">\r\n              <img src ={usaFlag} id={ENId} className=\"langButtons \" onClick={changeLanguage(\"EN\")} ></img>\r\n              <div>English</div>\r\n            </div>\r\n            </li>\r\n          </ul>\r\n        </DropdownContent>\r\n      </Dropdown>\r\n    </div>\r\n  );\r\n}\r\n",["48","49"],"C:\\Users\\shlomo\\Desktop\\majordomo\\src\\pages\\Main user page\\MainUserPage.js",["50","51","52","53","54","55","56","57","58","59","60","61"],"C:\\Users\\shlomo\\Desktop\\majordomo\\src\\config\\firebaseConfig.js",["62"],"C:\\Users\\shlomo\\Desktop\\majordomo\\src\\components\\containers.jsx",["63"],"import React, { Component } from 'react';\r\nimport { Dictionary } from '../Dictionary';\r\nimport \"./containers.css\"\r\nimport {base_url} from '../index'\r\n\r\n\r\n\r\nexport class Container extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            all_weights: props.all_weights,\r\n            page:[]\r\n            \r\n        }\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n    componentWillMount() {\r\n        var all_weights = this.state.all_weights\r\n        if(all_weights){\r\n            var page = []\r\n            console.log(all_weights)\r\n            all_weights.forEach(weight => {\r\n                var row = []\r\n                weight.forEach(element => {\r\n                     row.push(<td>{element}</td>)\r\n                });\r\n                page.push(<tr>{row}</tr>)\r\n            });\r\n            this.setState({page:page})\r\n        }\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <table><tr><th>container id</th><th>time eddad</th><th>item id</th><th>client id</th></tr>\r\n            {this.state.page}\r\n            </table>\r\n        )\r\n    }\r\n}\r\n\r\nexport class Item_block extends Component {\r\n    /* creates a squere containing an item object\r\n    input props:weight = the weight of the item\r\n                date weighd:\r\n    */\r\n    constructor(props) {\r\n        super(props);\r\n        var date =  getDate(props.weight_date);\r\n\r\n        this.state = {\r\n            name: props.name,\r\n            weight: props.weight,\r\n            unit: props.unit?props.unit:\"kg\",\r\n            weight_date: date,\r\n            color: props.color,\r\n            symbol: props.symbol\r\n                 \r\n        }\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <div id={this.props.id} className=\"item_container\">\r\n            <div className = \"item_squere\">\r\n                <div>\r\n                    {this.state.name}\r\n                </div>\r\n               <div >{this.state.weight} {this.state.unit}</div>\r\n               <div>{this.state.weight_date} </div>\r\n                </div>\r\n            <div className=\"add_to_order\">{Dictionary.add_to_order}</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction getDate(elementDate){\r\n\r\n    if(!elementDate)\r\n        return Dictionary[\"unknown_date\"]\r\n    var temp =  Date.now()\r\n    var now = new Date(temp)\r\n    var dataTime = new Date(elementDate)\r\n    var str\r\n\r\n            if((now.getMonth()+1 == dataTime.getMonth()+1) && (now.getDate() == dataTime.getDate()))\r\n            {\r\n                let hour = dataTime.getHours()\r\n                let minutes = dataTime.getMinutes()\r\n                let Seconds = dataTime.getSeconds()\r\n\r\n                str = hour +\":\"+minutes+\":\"+Seconds\r\n            }\r\n            else\r\n                str = dataTime.getDate() + \"/\" +  (dataTime.getMonth()+1) +\"/\" + dataTime.getFullYear()\r\n        \r\n            return str.toString()\r\n}\r\n\r\n\r\n","C:\\Users\\shlomo\\Desktop\\majordomo\\src\\components\\notifications.jsx",["64"],"import React, { Component } from 'react';\r\nimport \"./notifications.css\"\r\nimport yellow_warning from '../images/icons/triangle_warning.svg'\r\nimport circle_warning from '../images/icons/circle red warning.svg'\r\nimport cart_plus from '../images/icons/cart_plus.svg'\r\nimport suggest_dish from '../images/icons/suggest_dish.svg'\r\nimport overflow_sign from '../images/icons/overflow sign.svg'\r\nimport { Dictionary } from '../Dictionary';\r\nimport {base_url} from '../index'\r\nimport $ from 'jquery'\r\nimport ReactDOM from 'react-dom'\r\nimport { Item_block } from './containers';\r\n\r\n\r\n\r\nfunction get_notifications(callback, client_id){\r\n    //request all notifications for a business\r\n    var request = base_url+'/get/notifications';\r\n\r\n    if (client_id){\r\n        request += \"?client_id=\"+client_id + \"&active=true\"\r\n    console.log(request)\r\n    $.ajax({\r\n        url: request, \r\n        success: function (res) {\r\n            callback(res);\r\n        },\r\n        error: function (err) {\r\n            console.log(err)\r\n        }\r\n    });\r\n    }\r\n    else{\r\n        console.log(\"no user id enterd. nothing happend\")\r\n    }\r\n    \r\n}\r\n\r\nfunction process_notifications(data){\r\n    var page = []\r\n    \r\n    var items = [\"abc\",\"cucumber\",\"tomato\"]\r\n    if(typeof(data)==\"object\")\r\n\r\n        data.forEach(element => {\r\n\r\n            page.push(<Notification number={element[\"code\"]%2} item_name={items[element[\"food_item_id\"]]}  />)\r\n        });\r\n    ReactDOM.render( <div id =\"first_notification\" className=\"notification_block\">{page}<div id =\"insert_div\"></div></div>,document.getElementById('first_notification'))\r\n    \r\n    sleep(5000).then(() => {\r\n        ReactDOM.render( <Item_block id=\"replace_cont\" name=\"Avocado\" weight ={0.5} weight_date ={new Date(Date.now())} />,document.getElementById('replace_cont')) \r\n        ReactDOM.render( <Notification number={0}  item_name=\"Avocado\" total_weight = {0.5} />,document.getElementById('insert_div')) \r\n        // Do something after the sleep!\r\n      });  \r\n\r\n\r\n}\r\n\r\nfunction sleep (time) {\r\n    return new Promise((resolve) => setTimeout(resolve, time));\r\n  }\r\n  \r\n  // Usage!\r\n  \r\n\r\n\r\n\r\n\r\nexport class Notification_block extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            status:props.status,\r\n            number:props.number,\r\n            page: [],\r\n            action:props.action\r\n                 \r\n        }\r\n    }\r\n\r\n\r\n\r\n    componentWillMount(){\r\n        get_notifications(process_notifications,1)\r\n    }\r\n    render(){\r\n\r\n\r\n        return(\r\n            <div id =\"first_notification\" className=\"notification_block\">\r\n                <Notification number={0} item_name=\"red\" total_weight={26} />\r\n                <Notification  number={1} item_name=\"yellow\" total_weight={26}/>\r\n                <Notification number={2} item_name=\"orange\" total_weight={26}/>\r\n                </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport class Notification extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        var arr = [cart_plus,suggest_dish] \r\n        var text_descp = [Dictionary[\"add_to_order\"],Dictionary[\"suggest_dish\"]] \r\n        var action_by_number = {\r\n                                0:{\"action\":arr[0],\"action_desc\":text_descp[0],\"message\":Dictionary[\"just_few\"]},\r\n                                1:{\"action\":arr[0],\"action_desc\":text_descp[0],\"message\":Dictionary[\"running_low\"]},\r\n                                2:{\"action\":arr[1],\"action_desc\":text_descp[1],\"message\":Dictionary[\"must_use\"]}\r\n        };\r\n        var mess = action_by_number[props.number].message,\r\n        image = action_by_number[props.number].action,\r\n        desc = action_by_number[props.number].action_desc\r\n \r\n        this.state = {\r\n            number:props.number,            \r\n            item_name:props.item_name,\r\n            total_weight: props.total_weight, \r\n            message:props.message?this.state.message:mess,\r\n            action_image: image ,\r\n            action_desc:desc,\r\n        }\r\n    }\r\n    componentWillMount(){\r\n\r\n        \r\n    }\r\n\r\n    render(){\r\n\r\n        return(\r\n            <div className = \"notification_container\">\r\n                <div className=\"center_items left_notification_area\">\r\n                <img src ={this.state.action_image} className=\"notification_image left_img\" alt={this.state.action_desc}/>\r\n                {this.state.action_desc}\r\n                </div>\r\n                <div className=\"center_items notification_item_name\">\r\n                {this.state.item_name}\r\n                </div>\r\n                <div className=\"center_items notification_weight\">\r\n                <div>{this.state.total_weight}</div>\r\n                </div>\r\n\r\n                <div className = \"notification center_items\">\r\n                    {this.state.message}\r\n                </div>\r\n               <NotificationSymbol symbolNumber={this.state.number}/>                \r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport const NotificationSymbol= (props) =>{\r\n    // notification symbol by code \r\n    // 0 is a red circle, 1 is yellow tringle, 2, is green overflow dish    \r\n    var symbolArr = [circle_warning, yellow_warning, overflow_sign],\r\n        styleArr=[\"rgba(235, 104, 104, 0.32)\",\"rgba(247, 231, 185, 0.85)\",\"rgba(255, 103, 14, 0.2)\"]\r\n    var symbolNumber = props.symbolNumber, symbol = symbolArr[symbolNumber],\r\n        color = {\"background-color\": styleArr[symbolNumber]}\r\n    \r\n    return(\r\n        <div className=\"notification_symbol_area center_items\" style={color}>\r\n                <img src ={symbol} className=\"notification_symbol\"></img>\r\n        </div>\r\n    )\r\n\r\n\r\n    \r\n\r\n}","C:\\Users\\shlomo\\Desktop\\majordomo\\src\\components\\bars.jsx",["65","66","67","68","69"],{"ruleId":"70","severity":1,"message":"71","line":9,"column":10,"nodeType":"72","messageId":"73","endLine":9,"endColumn":18},{"ruleId":"70","severity":1,"message":"74","line":47,"column":17,"nodeType":"72","messageId":"73","endLine":47,"endColumn":26},{"ruleId":"70","severity":1,"message":"75","line":48,"column":17,"nodeType":"72","messageId":"73","endLine":48,"endColumn":29},{"ruleId":"76","severity":1,"message":"77","line":65,"column":25,"nodeType":"78","endLine":65,"endColumn":72},{"ruleId":"79","severity":1,"message":"80","line":66,"column":29,"nodeType":"78","endLine":66,"endColumn":96},{"ruleId":"81","severity":1,"message":"82","line":75,"column":33,"nodeType":"78","endLine":75,"endColumn":36},{"ruleId":"70","severity":1,"message":"83","line":5,"column":8,"nodeType":"72","messageId":"73","endLine":5,"endColumn":13},{"ruleId":"70","severity":1,"message":"84","line":8,"column":9,"nodeType":"72","messageId":"73","endLine":8,"endColumn":17},{"ruleId":"76","severity":1,"message":"77","line":118,"column":15,"nodeType":"78","endLine":118,"endColumn":102},{"ruleId":"76","severity":1,"message":"77","line":124,"column":15,"nodeType":"78","endLine":124,"endColumn":102},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"70","severity":1,"message":"89","line":2,"column":10,"nodeType":"72","messageId":"73","endLine":2,"endColumn":20},{"ruleId":"70","severity":1,"message":"90","line":2,"column":22,"nodeType":"72","messageId":"73","endLine":2,"endColumn":29},{"ruleId":"70","severity":1,"message":"91","line":3,"column":10,"nodeType":"72","messageId":"73","endLine":3,"endColumn":14},{"ruleId":"70","severity":1,"message":"92","line":5,"column":13,"nodeType":"72","messageId":"73","endLine":5,"endColumn":17},{"ruleId":"70","severity":1,"message":"93","line":7,"column":21,"nodeType":"72","messageId":"73","endLine":7,"endColumn":30},{"ruleId":"70","severity":1,"message":"94","line":11,"column":8,"nodeType":"72","messageId":"73","endLine":11,"endColumn":17},{"ruleId":"70","severity":1,"message":"95","line":12,"column":8,"nodeType":"72","messageId":"73","endLine":12,"endColumn":12},{"ruleId":"70","severity":1,"message":"96","line":27,"column":9,"nodeType":"72","messageId":"73","endLine":27,"endColumn":12},{"ruleId":"97","severity":1,"message":"98","line":31,"column":22,"nodeType":"78","endLine":31,"endColumn":124},{"ruleId":"97","severity":1,"message":"98","line":34,"column":14,"nodeType":"78","endLine":34,"endColumn":123},{"ruleId":"97","severity":1,"message":"99","line":91,"column":17,"nodeType":"78","endLine":91,"endColumn":27},{"ruleId":"97","severity":1,"message":"100","line":93,"column":17,"nodeType":"78","endLine":93,"endColumn":38},{"ruleId":"101","severity":1,"message":"102","line":19,"column":1,"nodeType":"103","endLine":19,"endColumn":26},{"ruleId":"70","severity":1,"message":"84","line":4,"column":9,"nodeType":"72","messageId":"73","endLine":4,"endColumn":17},{"ruleId":"76","severity":1,"message":"77","line":174,"column":17,"nodeType":"78","endLine":174,"endColumn":68},{"ruleId":"70","severity":1,"message":"84","line":6,"column":9,"nodeType":"72","messageId":"73","endLine":6,"endColumn":17},{"ruleId":"76","severity":1,"message":"77","line":18,"column":13,"nodeType":"78","endLine":18,"endColumn":85},{"ruleId":"76","severity":1,"message":"77","line":19,"column":13,"nodeType":"78","endLine":19,"endColumn":61},{"ruleId":"76","severity":1,"message":"77","line":20,"column":13,"nodeType":"78","endLine":20,"endColumn":56},{"ruleId":"76","severity":1,"message":"77","line":21,"column":13,"nodeType":"78","endLine":21,"endColumn":59},"no-unused-vars","'validate' is defined but never used.","Identifier","unusedVar","'errorCode' is assigned a value but never used.","'errorMessage' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/no-redundant-roles","The element form has an implicit role of form. Defining this explicitly is redundant and should be avoided.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'globe' is defined but never used.","'base_url' is defined but never used.","no-native-reassign",["104"],"no-negated-in-lhs",["105"],"'Dictionary' is defined but never used.","'LangBtn' is defined but never used.","'auth' is defined but never used.","'data' is defined but never used.","'Container' is defined but never used.","'cart_plus' is defined but never used.","'logo' is defined but never used.","'max' is assigned a value but never used.","react/jsx-pascal-case","Imported JSX component Item_block must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Nav_bar must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Notification_block must be in PascalCase or SCREAMING_SNAKE_CASE","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]